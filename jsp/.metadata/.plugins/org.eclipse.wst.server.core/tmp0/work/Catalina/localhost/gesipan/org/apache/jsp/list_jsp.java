/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.40
 * Generated at: 2020-12-02 08:12:05 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;

public final class list_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");

	// DB 연결
	Class.forName("com.mysql.jdbc.Driver");
	String db="jdbc:mysql://localhost:3306/pkc";
	String userid="root";
	String pw="1234";
	Connection conn=DriverManager.getConnection(db,userid,pw); // db정보,아이디,비번

	// limit에 들어갈 index번호 생성
	int index; // limit에 전달할 index값
	int pager; // 현재 나타내고자 하는 페이지 값을 저장 //page는 변수명으로 사용 불가
	if(request.getParameter("pager")==null)
	{
		pager=1;
	}
	else
	{
		pager=Integer.parseInt(request.getParameter("pager"));
	}
	
	// index 만들기
	index=(pager-1)*10;
	
	// 쿼리생성
	String sql="select * from gesipan order by id desc limit "+index+",10";
	// 심부름꾼 생성
	Statement stmt= conn.createStatement();
	// 쿼리실행 => ResultSet
	ResultSet rs=stmt.executeQuery(sql);
			

      out.write("    \r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<style>\r\n");
      out.write("a{\r\n");
      out.write("\ttext-decoration:none;\r\n");
      out.write("\tcolor:black;\r\n");
      out.write("}\r\n");
      out.write("a:hover{\r\n");
      out.write("\ttext-decoration:underline;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<!-- 레코드 내용 출력 -->\r\n");
      out.write("\t<table width=\"600\" align=\"center\">\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td> 이름 </td>\r\n");
      out.write("\t\t\t<td> 제목 </td>\r\n");
      out.write("\t\t\t<td> 성별 </td>\r\n");
      out.write("\t\t\t<td> 작성일 </td>\r\n");
      out.write("\t\t\t<td> 조회수 </td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t");

		while(rs.next())
		{
			// 숫자로 된 성별을 문자로 변환
			String sung=null;
			switch(rs.getInt("sung"))
			{
			case 0: sung="남자"; break;
			case 1: sung="여자"; break;
			case 2: sung="선택안함"; break;
			}
		
      out.write("\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td> ");
      out.print(rs.getString("name") );
      out.write("</td>\r\n");
      out.write("\t\t\t<td> <a href=\"readnum.jsp?id=");
      out.print( rs.getString("id"));
      out.write('"');
      out.write('>');
      out.write(' ');
      out.print(rs.getString("title") );
      out.write(" </a> </td>\r\n");
      out.write("\t\t\t<td> ");
      out.print(sung);
      out.write("</td>\r\n");
      out.write("\t\t\t<td> ");
      out.print(rs.getString("writeday") );
      out.write("</td>\r\n");
      out.write("\t\t\t<td> ");
      out.print(rs.getString("readnum") );
      out.write("</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t");

		}
		
      out.write("\r\n");
      out.write("\t     <tr> <!-- 사용자가 클릭하여 이동할수 있는 페이지 출력 -->\r\n");
      out.write("      \t<td colspan=\"2\" align=\"center\">\r\n");
      out.write("\t  \t ");

	  	 
	  	 	// 총페이지 값 구하기 총레코드수/페이지당 레코드수
	  	 	// select count(*) from gesipan;
	  	 	sql="select count(*) as cnt from gesipan";
	  	 	ResultSet rs2=stmt.executeQuery(sql);
	  		rs2.next();
	  	 	int page_cnt=rs2.getInt("cnt")/10+1;
	  	 	
	  	 	if(rs2.getInt("cnt")%10 == 0)
	  	 		page_cnt--;
	  	 	
	  	 	int pstart;
	  	 	
	  	 	pstart=pager/10;
	  	 	if(pager%10 == 0)
	  	 		pstart=pstart-1;
	  	 	
	  	 	pstart=Integer.parseInt(pstart+"1");
	  	 	
	  	 	int pend=pstart+9;
	  	 	
	  	 	if(page_cnt < pend)
	  	 		pend=page_cnt;
			
      out.write("\r\n");
      out.write("\t  \t \t<!-- 이전페이지 -->\r\n");
      out.write("\t  \t \t<!-- 현재 페이지 기준 10페이지 이전 -->\r\n");
      out.write("\t  \t \t");

	  	 	if(pstart !=1)////(현재페이지에 출력되는 그룹이 가장 첫번재 그룹이 아니냐 => pstart=1)
	  	 	{
	  	 		
	  	 	
      out.write("\r\n");
      out.write("\t  \t \t\r\n");
      out.write("\t  \t \t<a href=\"list.jsp?pager=");
      out.print(pstart-1);
      out.write("\">《</a>\r\n");
      out.write("\t  \t \t");

	  	 	}
	  	 	else
	  	 	{
	  	 	
      out.write("\r\n");
      out.write("\t  \t \t《\r\n");
      out.write("\t  \t \t");

	  	 	}
	  	 	
      out.write("\r\n");
      out.write("\t  \t \t<!-- 현재페이지 기준 1페이지 이전 -->\r\n");
      out.write("\t  \t \t");

  	 		if(pager !=1)
  	 		{
	  	 	
      out.write("\r\n");
      out.write("\t  \t \t<a href=\"list.jsp?pager=");
      out.print(pager-1 );
      out.write("\">◀</a>\r\n");
      out.write("\t  \t \t");

			}
  	 		else
  	 		{
 			
      out.write("\r\n");
      out.write(" \t\t\t◀\r\n");
      out.write(" \t\t\t");

  	 		}
	  	 	for(int i=pstart; i<=pend; i++)
	  	 	{
	  	 		String str="";
	  	 		if(pager ==i)
	  	 			str="style='color:red;'";
			
      out.write("\r\n");
      out.write("\t\t\t<a href=\"list.jsp?pager=");
      out.print(i);
      out.write('"');
      out.print(str );
      out.write('>');
      out.write(' ');
      out.print(i);
      out.write(" </a>\r\n");
      out.write("\t       \t");

			}
	  	 	
      out.write("\r\n");
      out.write("\t  \t \t<!-- 다음페이지 -->\r\n");
      out.write("\t  \t \t<!-- 현재페이지 기준 1페이지 이후 -->\r\n");
      out.write("\t  \t \t");

	  	 	if(pager != page_cnt)
	  	 	{
	  	 	
      out.write("\r\n");
      out.write("\t  \t \t<a href=\"list.jsp?pager=");
      out.print(pager+1 );
      out.write("\">▶</a>\r\n");
      out.write("\t      \t");

	  	 	}
	  	 	else
	  	 	{
	      	
      out.write("\r\n");
      out.write("      \t\t▶\r\n");
      out.write("      \t\t");

	  	 	}
      		
      out.write("\r\n");
      out.write("\t      \t<!-- 현재페이지 기준 다음 그룹으로 이동 -->\r\n");
      out.write("\t      \t");
if(page_cnt != pend)
      		{	
      		
      out.write("\r\n");
      out.write("\t      \t<a href=\"list.jsp?pager=");
      out.print(pend+1);
      out.write("\">》</a>\r\n");
      out.write("\t      \t");

      		}
	      	else
	      	{
	      	
      out.write("\r\n");
      out.write("\t      \t》\r\n");
      out.write("\t      \t");

	      	}
	      	
      out.write("\r\n");
      out.write("\t      \r\n");
      out.write("\t      \r\n");
      out.write("\t      </td>\r\n");
      out.write("\t     </tr>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td colspan=\"2\"> <a href=\"write.jsp\"> 글쓰기</a> </td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t</table>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
